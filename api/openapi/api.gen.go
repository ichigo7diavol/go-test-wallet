// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for WalletOperationRequestOperationType.
const (
	WalletOperationRequestOperationTypeDEPOSIT  WalletOperationRequestOperationType = "DEPOSIT"
	WalletOperationRequestOperationTypeWITHDRAW WalletOperationRequestOperationType = "WITHDRAW"
)

// Defines values for WalletOperationResponseOperationType.
const (
	WalletOperationResponseOperationTypeDEPOSIT  WalletOperationResponseOperationType = "DEPOSIT"
	WalletOperationResponseOperationTypeWITHDRAW WalletOperationResponseOperationType = "WITHDRAW"
)

// CreateWalletRequest defines model for CreateWalletRequest.
type CreateWalletRequest struct {
	InitialBalance float32 `json:"initialBalance"`
}

// Wallet defines model for Wallet.
type Wallet struct {
	Balance   *float32            `json:"balance,omitempty"`
	CreatedAt *time.Time          `json:"createdAt,omitempty"`
	UpdatedAt *time.Time          `json:"updatedAt,omitempty"`
	WalletId  *openapi_types.UUID `json:"walletId,omitempty"`
}

// WalletOperationRequest defines model for WalletOperationRequest.
type WalletOperationRequest struct {
	Amount        float32                             `json:"amount"`
	OperationType WalletOperationRequestOperationType `json:"operationType"`
	WalletId      openapi_types.UUID                  `json:"walletId"`
}

// WalletOperationRequestOperationType defines model for WalletOperationRequest.OperationType.
type WalletOperationRequestOperationType string

// WalletOperationResponse defines model for WalletOperationResponse.
type WalletOperationResponse struct {
	Amount        *float32                              `json:"amount,omitempty"`
	NewBalance    *float32                              `json:"newBalance,omitempty"`
	OldBalance    *float32                              `json:"oldBalance,omitempty"`
	OperationType *WalletOperationResponseOperationType `json:"operationType,omitempty"`
	Timestamp     *time.Time                            `json:"timestamp,omitempty"`
	WalletId      *openapi_types.UUID                   `json:"walletId,omitempty"`
}

// WalletOperationResponseOperationType defines model for WalletOperationResponse.OperationType.
type WalletOperationResponseOperationType string

// ChangeWalletJSONRequestBody defines body for ChangeWallet for application/json ContentType.
type ChangeWalletJSONRequestBody = WalletOperationRequest

// CreateWalletJSONRequestBody defines body for CreateWallet for application/json ContentType.
type CreateWalletJSONRequestBody = CreateWalletRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ╨í╨╛╨▓╨╡╤Ç╤ê╨╕╤é╤î ╨╛╨┐╨╡╤Ç╨░╤å╨╕╤Ä ╤ü ╨▒╨░╨╗╨░╨╜╤ü╨╛╨╝ (DEPOSIT ╨╕╨╗╨╕ WITHDRAW)
	// (POST /wallet)
	ChangeWallet(ctx echo.Context) error
	// ╨ƒ╨╛╨╗╤â╤ç╨╕╤é╤î ╤ü╨┐╨╕╤ü╨╛╨║ ╨▓╤ü╨╡╤à ╨║╨╛╤ê╨╡╨╗╤î╨║╨╛╨▓
	// (GET /wallets)
	ListWallets(ctx echo.Context) error
	// ╨í╨╛╨╖╨┤╨░╤é╤î ╨╜╨╛╨▓╤ï╨╣ ╨║╨╛╤ê╨╡╨╗╨╡╨║
	// (POST /wallets)
	CreateWallet(ctx echo.Context) error
	// ╨ú╨┤╨░╨╗╨╕╤é╤î ╨║╨╛╤ê╨╡╨╗╨╡╨║
	// (DELETE /wallets/{walletId})
	DeleteWallet(ctx echo.Context, walletId openapi_types.UUID) error
	// ╨ƒ╨╛╨╗╤â╤ç╨╕╤é╤î ╨╕╨╜╤ä╨╛╤Ç╨╝╨░╤å╨╕╤Ä ╨╛ ╨║╨╛╤ê╨╡╨╗╤î╨║╨╡
	// (GET /wallets/{walletId})
	GetWallet(ctx echo.Context, walletId openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ChangeWallet converts echo context to params.
func (w *ServerInterfaceWrapper) ChangeWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ChangeWallet(ctx)
	return err
}

// ListWallets converts echo context to params.
func (w *ServerInterfaceWrapper) ListWallets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListWallets(ctx)
	return err
}

// CreateWallet converts echo context to params.
func (w *ServerInterfaceWrapper) CreateWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateWallet(ctx)
	return err
}

// DeleteWallet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "walletId", ctx.Param("walletId"), &walletId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteWallet(ctx, walletId)
	return err
}

// GetWallet converts echo context to params.
func (w *ServerInterfaceWrapper) GetWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "walletId", ctx.Param("walletId"), &walletId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWallet(ctx, walletId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/wallet", wrapper.ChangeWallet)
	router.GET(baseURL+"/wallets", wrapper.ListWallets)
	router.POST(baseURL+"/wallets", wrapper.CreateWallet)
	router.DELETE(baseURL+"/wallets/:walletId", wrapper.DeleteWallet)
	router.GET(baseURL+"/wallets/:walletId", wrapper.GetWallet)

}
